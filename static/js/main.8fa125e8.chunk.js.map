{"version":3,"sources":["App.js","serviceWorker.js","index.js","images/background.jpg"],"names":["App","useState","user","setUser","query","setQuery","Container","fluid","className","style","height","backgroundImage","background","marginTop","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","console","log","borderWidth","borderRadius","borderColor","CardColumns","Card","Header","name","public_repos","location","company","hireable","email","width","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"iTAiHeA,MA1Gf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEaF,mBAAS,IAFtB,mBAENG,EAFM,KAECC,EAFD,KAmBb,OACE,kBAACC,EAAA,EAAD,CAAWC,OAAK,EAACC,UAAU,MAAMC,MAAO,CAACC,OAAQ,QAASC,gBAAgB,OAAD,OAASC,IAAT,OACvE,4BAAQJ,UAAU,cAAlB,gBACA,kBAACF,EAAA,EAAD,CAAWG,MAAO,CAACI,UAAW,SAC5B,yBAAKL,UAAU,cACb,2BACEM,KAAK,OACLN,UAAU,aACVO,YAAY,2BACZC,SAAU,SAACC,GAAD,OAAOZ,EAASY,EAAEC,OAAOC,QACnCA,MAAOf,EACPgB,WAvBK,SAACC,GACE,UAAZA,EAAIC,KACNC,MAAM,gCAAD,OAAiCnB,IACnCoB,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACC,GACLtB,EAAQsB,GACRE,QAAQC,IAAIH,GACZpB,EAAS,WAqBVH,EACC,kBAACI,EAAA,EAAD,CAAWG,MAAO,CAACoB,YAAa,gBAAiBC,aAAc,cAAeC,YAAa,OAAQlB,UAAW,QAC9G,kBAACmB,EAAA,EAAD,CAAaxB,UAAY,WACvB,kBAACyB,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,OAAN,KAAa,sCAEC,MAAbhC,EAAKiC,KAAe,2BAAIjC,EAAKiC,MAAY,2CAE5C,kBAACF,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,OAAN,KAAa,8CAES,MAArBhC,EAAKkC,aAAuB,2BAAIlC,EAAKkC,cAAoB,gDAE5D,kBAACH,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,OAAN,KAAa,0CAEK,MAAjBhC,EAAKmC,SACJ,2BAAInC,EAAKmC,UAET,+DAGJ,kBAACJ,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,OAAN,KAAa,yCAEI,MAAhBhC,EAAKoC,QACJ,2BAAIpC,EAAKoC,SAET,8DAGJ,kBAACL,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,OAAN,KAAa,oDAEK,MAAjBhC,EAAKqC,SACJ,2BAAIrC,EAAKqC,UAET,8DAGJ,kBAACN,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,OAAN,KAAa,uCAEE,MAAdhC,EAAKsC,MACJ,2BAAItC,EAAKsC,OAET,6DAGJ,kBAACP,EAAA,EAAD,CAAMzB,UAAY,WAChB,kBAACyB,EAAA,EAAKC,OAAN,KAAa,+CADf,yBAGA,kBAACD,EAAA,EAAD,CAAMzB,UAAY,WAChB,kBAACyB,EAAA,EAAKC,OAAN,KAAa,6DADf,0BAMF,kBAACD,EAAA,EAAD,CAAMzB,UAAY,UAAUC,MAAO,CAACgC,MAAO,MAAO5B,UAAW,SAA7D,sMAII,6BAJJ,+DCxFU6B,QACW,cAA7BC,OAAON,SAASO,UAEe,UAA7BD,OAAON,SAASO,UAEhBD,OAAON,SAASO,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,a,kBEzI5BC,EAAOC,QAAU,IAA0B,yC","file":"static/js/main.8fa125e8.chunk.js","sourcesContent":["// <a href='https://www.freepik.com/free-photos-vectors/background'>Background vector created by Creative_hat - www.freepik.com</a>\n\nimport React, { useState } from \"react\";\nimport {Card, Container, CardColumns, Col, Row} from 'react-bootstrap'\nimport \"./App.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport background from './images/background.jpg'\nfunction App() {\n  const [user, setUser] = useState(\"\");\n  const [query, setQuery] = useState(\"\");\n\n  //////////////////////////////////////////////////////////////////////////////////////////\n\n  //////////////////////////////////////////////////////////////////////////////////////////\n  const search = (evt) => {\n    if (evt.key === \"Enter\") {\n      fetch(`https://api.github.com/users/${query}`)\n        .then((res) => res.json())\n        .then((res) => {\n          setUser(res);\n          console.log(res);\n          setQuery(\"\");\n        });\n    }\n  };\n\n  return (\n    <Container fluid className=\"App\" style={{height: \"100vh\", backgroundImage: `url(${background})`}}>\n      <header className=\"App-header\">Github-Buddy</header>\n      <Container style={{marginTop: \"20vh\"}}>\n        <div className=\"search-box\">\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Press Enter to Search...\"\n            onChange={(e) => setQuery(e.target.value)}\n            value={query}\n            onKeyPress={search}\n          />\n          \n        </div>\n\n        {user ? (\n          <Container style={{borderWidth: \".2rem .2rem 0\", borderRadius: \"8px 8px 0 0\", borderColor: \"grey\", marginTop: \"5vh\"}}>\n          <CardColumns className = \"mx-auto\">\n            <Card>\n              <Card.Header><h4>Name:</h4></Card.Header>\n              \n              {user.name != null ? <p>{user.name}</p> : <p>add a name!</p>}\n            </Card>\n            <Card>\n              <Card.Header><h4>Public Repos:</h4></Card.Header>\n              \n              {user.public_repos != null ? <p>{user.public_repos}</p> : <p>Make some Repos!</p>}\n            </Card>\n            <Card>\n              <Card.Header><h4>Location:</h4></Card.Header>\n              \n              {user.location != null ? (\n                <p>{user.location}</p>\n              ) : (\n                <p>Add a location to your profile!</p>\n              )}\n            </Card>\n            <Card>\n              <Card.Header><h4>Company:</h4></Card.Header>\n              \n              {user.company != null ? (\n                <p>{user.company}</p>\n              ) : (\n                <p>add a company to your profile!</p>\n              )}\n            </Card>\n            <Card>\n              <Card.Header><h4>Available for hire?</h4></Card.Header>\n              \n              {user.hireable != null ? (\n                <p>{user.hireable}</p>\n              ) : (\n                <p>make it known on your profile!</p>\n              )}\n            </Card>\n            <Card>\n              <Card.Header><h4>email:</h4></Card.Header>\n              \n              {user.email != null ? (\n                <p>{user.email}</p>\n              ) : (\n                <p>add an email to your profile!</p>\n              )}\n            </Card>\n            <Card className = \"mx-auto\">\n              <Card.Header><h4>Laguages Used:</h4></Card.Header> Feature  coming soon\n              </Card>\n            <Card className = \"mx-auto\">\n              <Card.Header><h4>Suggestion for Next Project:</h4></Card.Header>Feature  coming soon\n              </Card>\n          </CardColumns>\n          </Container>\n        ) : (\n          <Card className = \"mx-auto\" style={{width: \"40%\", marginTop: \"10vh\"}}>\n              Github-Buddy checks to make sure you have your profile filled out\n              and with the right information! Currently working on adding a pie\n              chart of languages used and a suggestion for your next project.\n              <br />\n              Search for your username and press enter to get started!\n            </Card>\n        )}\n      </Container>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/background.3960c1e7.jpg\";"],"sourceRoot":""}